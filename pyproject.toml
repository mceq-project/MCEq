[build-system]
requires = ["scikit-build-core"]
build-backend = "scikit_build_core.build"

[project]
name = "MCEq"
version = "1.3.0"
description = "Numerical cascade equation solver"
readme = "README.md"
authors = [{ name = "Anatoli Fedynitch", email = "afedynitch@gmail.com" }]
license = { text = "BSD 3-Clause License" }
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering :: Physics",
    "Intended Audience :: Science/Research",
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: BSD License",
]

dependencies = [

    "h5py",
    "particletools",
    "crflux>1.0.5",
    "scipy",
    "numpy",
    "tqdm",
    "requests",
    "jacobi",
]
[project.optional-dependencies]
test = ["pytest"]

[tool.scikit-build]
build-dir = "build/{wheel_tag}"
wheel.packages = ["mceq_config", "src/MCEq"]

[tool.setuptools.package-data]
"MCEq" = ["data/README.md", "data/DDM_1.0.npy"]

[project.urls]
Changelog = "https://mceq.readthedocs.io/en/latest/en/latest/changelog.html"
Documentation = "https://mceq.readthedocs.io/en/latest"
Homepage = "https://github.com/afedynitch/MCEq"
Issues = "https://github.com/afedynitch/MCEq/issues"

[tool.ruff.lint]
exclude = ["examples/**"]

# extend-select = [
#     # "ANN",    # flake8-annotations
#     "ARG",    # flake8-unused-arguments
#     "B",      # flake8-bugbear
#     "C4",     # flake8-comprehensions
#     "EM",     # flake8-errmsg
#     "FBT",    # flake8-boolean-trap
#     "FLY",    # flynt
#     "I",      # isort
#     "ICN",    # flake8-import-conventions
#     "ISC",    # flake8-implicit-str-concat
#     "N",      # flake8-naming
#     "PERF",   # perflint
#     "PGH",    # pygrep-hooks
#     "PIE",    # flake8-pie
#     "PL",     # pylint
#     "PT",     # flake8-pytest-style
#     "PTH",    # flake8-use-pathlib
#     "PYI",    # flake8-pyi
#     "RET",    # flake8-return
#     "RUF",    # Ruff-specific
#     "S",      # eval -> literal_eval
#     "SIM",    # flake8-simplify
#     "T20",    # flake8-print
#     "TC",     # flake8-type-checking
#     "TID251", # flake8-tidy-imports.banned-api
#     "TRY",    # tryceratops
#     "UP",     # pyupgrade
#     "YTT",    # flake8-2020
#     "FURB",   # refurb
# ]
ignore = [
    "PLE1205", # Format check doesn't work with our custom logger
    "PT013",   # It's correct to import classes for typing!
    "RUF009",  # Too easy to get a false positive
    "PYI025",  # Wants Set to be renamed AbstractSet
    "ISC001",  # Conflicts with formatter
    "PLR09",   # Too many ...
    "PLR2004", # Magic value used in comparison
    "PLC0415", # Import should be at top of file
    "ANN401",  # Disallow dynamically typed expressions
    "S101",    # Use of assert detected
    "S603",    # subprocess untrusted input
    "S607",    # subprocess call
    "S404",    # subprocess module is possibly insecure
    "B017",    # Complains about plain Exceptions
    "PT011",   # Also about too plain exceptions
    "TRY003",  # I know my exception handling is bad
    # "ANN001",  # Unused type annotation
    # "ANN002",  # Unused type comment
    # "ANN201", 
    "EM101",
]
typing-modules = ["scikit_build_core._compat.typing"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.isort]
known-local-folder = ["pathutils"]
