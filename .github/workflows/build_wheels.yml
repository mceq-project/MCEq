name: Build_with_cibuildwheel_and_upload_to_PyPI

on:
  workflow_dispatch:
  push:
    paths:
      - 'MCEq/**'
      - '!MCEq/data/README.md'
    tags:        
      - 'release**' 
  pull_request:
    branches:
      - master
    types:
      - closed
    paths:
      - 'MCEq/**'
      - '!MCEq/data/README.md'

jobs:
    sdist:
      name: Make SDist
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4

        - name: Dump GitHub context
          run: echo '${{ toJSON(github) }}'

        - uses: actions/setup-python@v4
          name: Install Python
          with:
            python-version: '3.12'

        - run: python -m pip install --upgrade pip wheel setuptools
        - run: pipx run build --sdist
        - run: python -m pip install --prefer-binary -v `echo dist/MCEq-*`[test]
        - run: python -m pytest -v

        - uses: actions/upload-artifact@v4
          with:
            path: dist/*.tar.gz


    wheels:
      if: ${{ github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v') }}
      name: ${{ matrix.py }} ${{ matrix.os }} ${{ matrix.arch }}
      runs-on: ${{ matrix.os }}
      strategy:
        fail-fast: false
        matrix:
          os: [ubuntu-latest, macos-13, macos-14, windows-latest]
          arch: [auto, aarch64]
          py: [cp39, cp310, cp311, cp312, cp313]
          exclude:
            - os: windows-latest
              arch: aarch64
            - os: macos-13
              arch: aarch64
            - os: macos-14
              arch: aarch64
      env:
        PYTEST_COMMAND: pytest --pyargs MCEq
        PYTEST_COMMAND_AARCH64: >
          cd {package}/MCEq/tests &&
          pytest test_densities.py test_msis.py

      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Set up QEMU
          if: ${{ matrix.arch == 'aarch64' }}
          uses: docker/setup-qemu-action@v3

        - name: Set up testing command for aarch64
          if: ${{ (matrix.arch == 'aarch64') && !(matrix.py == 'cp36') }}
          run: |
            echo "CIBW_TEST_COMMAND=${{ env.PYTEST_COMMAND_AARCH64 }}" >> $GITHUB_ENV
          shell: bash

        - name: Set up testing command for other cases
          if: ${{ !(matrix.arch == 'aarch64') }}
          run: |
            echo "CIBW_TEST_COMMAND=${{ env.PYTEST_COMMAND }}" >> $GITHUB_ENV
          shell: bash
        
        # Set deployment target env var on macos 13
        - if: ${{ matrix.os == 'macos-13' }}
          name: Set deployment target for MacOS-13
          run: export MACOSX_DEPLOYMENT_TARGET=13.0

        - if: ${{ matrix.os == 'macos-13'}}
          name: Use a more legacy version of Xcode tools on MacOS-13
          run: sudo xcode-select -s "/Applications/Xcode_14.2.app"

        - if: ${{ matrix.os != 'macos-14' }}
          name: Build wheels
          uses: pypa/cibuildwheel@v2.21.3
          env:
            CIBW_BUILD: ${{ matrix.py }}-*
            CIBW_ARCHS: ${{ matrix.arch }}
            CIBW_ENVIRONMENT_PASS_LINUX: CI
            CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
            # Will avoid testing on emulated architectures
            CIBW_TEST_SKIP: "*-*linux_{aarch64,ppc64le,s390x,armv7l}"
            CIBW_TEST_REQUIRES: pytest
        
        - if: ${{ matrix.os == 'macos-14' }}
          name: cibuildwheel on MacOS-14
          uses: pypa/cibuildwheel@v2.21.3
          env:
            CIBW_BUILD: ${{ matrix.py }}-*
            CIBW_ARCHS: ${{ matrix.arch }}
            no_proxy: '*'
            MACOSX_DEPLOYMENT_TARGET: 14.0

        - uses: actions/upload-artifact@v4
          with:
            name: wheel-${{ matrix.py }}-${{ matrix.os }}-${{ matrix.arch }}
            path: ./wheelhouse/*.whl

    upload_to_PyPI:
      name: Upload to PyPI
      needs: [wheels, sdist]
      runs-on: ubuntu-latest
      if: ${{ startsWith(github.ref, 'refs/tags/v') }}
      steps:
        - name: Download files in artifact to "dist/" directory
          uses: actions/download-artifact@v4.1.7
          with:
            merge-multiple: true
            path: dist

        - name: Publish package to PyPI
          uses: pypa/gh-action-pypi-publish@release/v1.8
          with:
            user: __token__
            password: ${{ secrets.PYPI_API_TOKEN }}
