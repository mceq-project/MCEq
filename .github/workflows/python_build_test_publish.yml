name: Python Build, Test, and Publish

on:
  pull_request:
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
      - '.github/workflows/python_build_test_publish.yml'
  push:
    branches:
      - master
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
      - '.github/workflows/python_build_test_publish.yml'
    tags:
      - 'v*.*.*' # Common version tag pattern

jobs:
  test_wheels_pr:
    name: Test Wheels (PR - Linux, Python 3.13)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build and test wheels
        uses: pypa/cibuildwheel@v2.17.0
        env:
          CIBW_BUILD: "cp313-*" # Python 3.13
          CIBW_ARCHS: "auto"    # Native architecture for the runner
          CIBW_PLATFORM: "linux"
          CIBW_TEST_COMMAND: "pytest --pyargs MCEq"
          CIBW_TEST_REQUIRES: "pytest"
          CIBW_SKIP: "*-musllinux*"
          CIBW_PRERELEASE_PYTHONS: True

  build_wheels_all:
    name: Build Wheels (${{ matrix.os }})
    if: (github.event_name == 'push' && github.ref == 'refs/heads/master') || startsWith(github.ref, 'refs/tags/')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313-*"
          CIBW_SKIP: "*-musllinux* pp*" # Skip musl and PyPy by default
          CIBW_TEST_REQUIRES: "pytest"
          CIBW_ARCHS_LINUX: "auto aarch64"
          CIBW_ARCHS_WINDOWS: "auto" # 'auto' is typically x64. Add 'ARM64' if Windows ARM64 wheels are needed.
          CIBW_ARCHS_MACOS: "x86_64 arm64 universal2"
          # Test commands: general, and specific for Linux aarch64 from your existing config
          CIBW_TEST_COMMAND: "pytest --pyargs MCEq"
          CIBW_TEST_COMMAND_LINUX_AARCH64: "cd {package}/MCEq/tests && pytest test_densities.py test_msis.py"
          # Test skip for the arm64 part of universal2 wheels on macOS (from your existing config)
          CIBW_TEST_SKIP: "*-macosx_universal2:arm64"

      - name: Store wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ github.run_id }} # Unique artifact name per OS and run
          path: ./wheelhouse/*.whl

  make_sdist:
    name: Make SDist
    if: (github.event_name == 'push' && github.ref == 'refs/heads/master') || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # A recent Python for build tools
      - name: Install build dependencies
        run: python -m pip install build
      - name: Build SDist
        run: python -m build --sdist
      - name: Store SDist
        uses: actions/upload-artifact@v4
        with:
          name: sdist-${{ github.run_id }} # Unique artifact name per run
          path: dist/*.tar.gz

  upload_to_pypi:
    name: Upload to PyPI
    if: startsWith(github.ref, 'refs/tags/') # Only run on tag pushes
    needs: [build_wheels_all, make_sdist]
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for trusted publishing if you switch to it
    steps:
      - name: Create download directory
        run: mkdir -p downloaded_artifacts

      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*-${{ github.run_id }} # Pattern to match wheel artifacts from this run
          path: downloaded_artifacts/

      - name: Download SDist artifact
        uses: actions/download-artifact@v4
        with:
          name: sdist-${{ github.run_id }} # Name of the sdist artifact from this run
          path: downloaded_artifacts/sdist/

      - name: Prepare packages for publishing
        run: |
          mkdir -p dist_to_publish
          find downloaded_artifacts/ -type f -name '*.whl' -exec mv {} dist_to_publish/ ;
          find downloaded_artifacts/sdist/ -type f -name '*.tar.gz' -exec mv {} dist_to_publish/ ;
          echo "Files to publish:"
          ls -R dist_to_publish

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: dist_to_publish/
